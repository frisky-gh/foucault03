#!/usr/bin/perl

use strict;
use English;
use Cwd "abs_path";
use Template;
use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat);
use JSON::XS;

$0 =~ m"^(.*)/";
our $TOOLHOME = abs_path( "$1/.." // '..' );
our $CONFDIR                 = "$TOOLHOME/conf";
our $BINDIR                  = "$TOOLHOME/bin";
our $TMPDIR                  = "$TOOLHOME/tmp";
our $STATUSDIR               = "$TOOLHOME/status";
our $LOGDIR                  = "$TOOLHOME/log";
our $WELLKNOWNSDIR           = "$TOOLHOME/conf/wellknowns";
our $DETECTDIR               = "$TOOLHOME/detect";

our $CONCATFILTER_CONFFILE      = "$CONFDIR/concatfilter.conf";
our $ANOMALYMONITOR_CONFFILE    = "$CONFDIR/anomalymonitor.conf";
our $TRANSACTIONFILTER_CONFFILE = "$CONFDIR/transactionfilter.conf";
our $TRAFFICMONITOR_CONFFILE    = "$CONFDIR/trafficmonitor.conf";

our $TRAFFICDIR;
our $WELLKNOWNDIR;
our $FILTERBUFFER_FILE;

#### test confs

sub read_regexpfile ($) {
	my ( $f ) = @_;
	open my $h, '<', $f or do {
		print "read_regexpfile: $f: cannot read.\n";
		return undef, undef;
	};
	my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size,
	    $atime, $mtime, $ctime, $blksize, $blocks) = stat $h;
	my $regexp = join '', <$h>;
	chomp $regexp;
	close $h;
	my $regexp_compiled;
	eval {
		$regexp_compiled = qr"^$regexp$";
	};
	unless( defined $regexp_compiled ){
		print "read_regexpfile: $f: cannot compile.\n";
		return undef, undef;
	}
	return $regexp_compiled, $mtime;
}

sub test_concatfilter_conf () {
	my @conf;
	my $rule;
	open my $h, '<', $CONCATFILTER_CONFFILE or do {
		die "cannot open $CONCATFILTER_CONFFILE: $OS_ERROR, stopped";
	};
	while (<$h>) {
		next if m"^\s*(#|$)";
		if    ( m"^\s*concat_rule\s*$" ){
			$rule = {
				'name' => "$CONCATFILTER_CONFFILE:$.",
				'type' => 'pattern-first',
				'limit_line' => 100,
				'limit_time' => 10*60,
			};
			push @conf, $rule;
		}elsif( m"^\s*target\s+(\S.*)$" ){
			push @{$$rule{targets}}, qr"^($1)$";
		}elsif( m"^\s*pattern\s+(\S.*)$" ){
			push @{$$rule{patterns}}, qr"^($1)$";
		}elsif( m"^\s*type\s+(\S.*)$" ){
			$$rule{type} = $1;
		}else{
			print STDERR
				"$CONCATFILTER_CONFFILE:$.: illegal format, ignored.\n";
		}
	}
	close $h or do {
		die "close failed for $CONCATFILTER_CONFFILE: $OS_ERROR, stopped";
	};
	return \@conf;
}

sub test_anomalymonitor_conf () {
	my @conf;
	my $rule;
	my $redirect;
	open my $h, '<', $ANOMALYMONITOR_CONFFILE or do {
		die "cannot open $ANOMALYMONITOR_CONFFILE: $OS_ERROR, stopped";
	};
	while (<$h>) {
		next if m"^\s*(#|$)";
		if    ( m"^\s*anomalymonitor_rule\s*$" ){
			$rule = { 'name' => "$ANOMALYMONITOR_CONFFILE:$." };
			push @conf, $rule;
		}elsif( m"^\s*target\s+(\S.*)$" ){
			my $re;
			eval { $re = qr"^($1)$"; };
			if( $@ ){ die "$ANOMALYMONITOR_CONFFILE:$.: $@, stopped"; }
			push @{$$rule{targets}}, $re;
		}elsif( m"^\s*pattern\s+(\S.*)$" ){
			$$rule{pattern} = $1;
			my $f = "$WELLKNOWNSDIR/$1.regexp";
			$$rule{pattern_file} = $f;
			my ($regexp, $mtime) = read_regexpfile $f;
			unless( defined $regexp ){
				print STDERR "$ANOMALYMONITOR_CONFFILE:$.:" .
					"$f: cannot open.\n";
				$$rule{pattern_mtime} = undef;
				$$rule{pattern_regexp} = undef;
				next;
			}
			$$rule{pattern_mtime} = $mtime;
			$$rule{pattern_regexp} = $regexp;
			print "anomalymonitor_conf: $f: loaded.\n";
		}elsif( m"^\s*redirect\s+(\S.*)$" ){
			$redirect = {
				'name' => "$ANOMALYMONITOR_CONFFILE:$.",
				'event' => $1,
			};
			push @{$$rule{redirects}}, $redirect;
		}elsif( m"^\s*tag\s+(\S.*)$" ){
			$$redirect{tag} = $1;
		}elsif( m"^\s*message\s+(\S.*)$" ){
			$$redirect{message} = $1;
		}else{
			print STDERR "$ANOMALYMONITOR_CONFFILE:$.:" .
				" illegal format, ignored.\n";
		}
	}
	close $h or do {
		die "close failed for $ANOMALYMONITOR_CONFFILE: $OS_ERROR, stopped";
	};
	return \@conf;
}

sub test_report_conf () {
	my $f = "$CONFDIR/report.conf";
	open my $h, '<', $f or do {
		die "$f: cannot open, stopped";
	};
	my @alerts;
	my @flash_reports;
	my @daily_reports;
	my %param;

	my $section;
	my $subsection;
	my @errors;
	while( <$h> ){
		chomp;
		next if m"^\s*(#|$)";
		if( m"^(\w+)=(\S.*)$" ){
			$param{$1} = $2;
		}elsif( m"^\s*define_alert\s+(\w+)\s*$" ){
			$section = {
				name        => $1,
				maxsize     => 1000,
				min_interval => 30,
			};
			push @alerts, $section;

		}elsif( m"^\s*captures_anomalylogs\s*$" ){
			$subsection = {
			};
			push @{$$section{from_anomalylogs}}, $subsection;

		}elsif( m"^\s*captures_unmonitoredlogs\s*$" ){
			$subsection = {
			};
			push @{$$section{from_unmonitoredlogs}}, $subsection;

		}elsif( m"^\s*captures_trafficlogs\s*$" ){
			$subsection = {
			};
			push @{$$section{from_trafficlogs}}, $subsection;

		}elsif( m"^\s*(?:marked_as|matching_mark)\s+(\S.*)$" ){
			push @{$$subsection{marks}}, $1;
			
		}elsif( m"^\s*(?:not_marked_as|unmatching_mark)\s+(\S.*)$" ){
			push @{$$subsection{nomarks}}, $1;

		}elsif( m"^\s*(?:tagged_as|matching_tag)\s+(\S.*)$" ){
			push @{$$subsection{tag_regexps}}, qr"^$1$";

		}elsif( m"^\s*(?:named_as|matching_name|matching_trafficname)\s+(\S.*)$" ){
			push @{$$subsection{trafficname_regexps}}, qr"^$1$";

		}elsif( m"^\s*matching_event\s+(\S.*)$" ){
			push @{$$subsection{event_regexps}}, qr"^$1$";

		}elsif( m"^\s*matching_monitorname\s+(\S.*)$" ){
			push @{$$subsection{monitorname_regexps}}, qr"^$1$";

		}elsif( m"^\s*(?:passing_through|matching_route)\s+(\S.*)$" ){
			push @{$$subsection{route_regexps}}, qr"^$1$";

		}elsif( m"^\s*marks_logs_as\s+(\S.*)$" ){
			push @{$$section{mark_logs_as}}, $1;

		}elsif( m"^\s*define_flash_report\s+(\w+)\s*$" ){
			$section = {
				name           => $1,
				maxsize        => 1000,
				min_interval   => 30,
				sent_to        => [],
				contains_alert => [],
			};
			push @flash_reports, $section;

		}elsif( m"^\s*define_daily_report\s+(\w+)\s*$" ){
			$section = {
				name           => $1,
				max_size       => 1000,
				min_interval   => 30,
				sent_to        => [],
				contains_alert => [],
			};
			push @daily_reports, $section;

		}elsif( m"^\s*contains_alert\s+(\S.*)$" ){
			push @{$$section{contains_alert}}, qr"^$1$";

		}elsif( m"^\s*sent_to\s+(\S+)$" ){
			push @{$$section{sent_to}}, $1;

		}elsif( m"^\s*max_size\s+(\d+)$" ){
			$$section{max_size} = 0+$1;

		}elsif( m"^\s*min_interval\s+(\d+)$" ){
			$$section{min_interval} = 0+$1;

		}else{
			push @errors, "$f:$.: illegal format.\n";
			next;
		}
	}
	close $h;

	if( @errors ){
		foreach my $error ( @errors ){
			print STDERR $error, "\n";
		}
		die;
	}
	return {
		alerts         => [@alerts],
		flash_reports  => [@flash_reports],
		daily_reports  => [@daily_reports],
		errors	       => [@errors],
		param          => {%param},
	};
}
 
sub test_wellknown_rules_conf ($) {
	my ($conffile) = @_;
	my $mark = "rule0000";
	my %mark2replace;
	my @res;
	open my $h, '<', $conffile or die "$conffile: cannot open, stopped";

	while( <$h> ){
		chomp;
		s{^\s*}{}g;
		next if m{^\s*($|#)};
		my @c = split m{\s+};
		if( m"^\s*(ignore|replace)\s+(\S.*)$" ){
			my $pattern = $2;
			eval { qr"$pattern"; };
			unless( $@ eq "" ){
				print STDERR "$conffile:$.: syntax error. \n";
				print STDERR "$conffile:$.: $@\n";
				next;
			}
			push @res, "$pattern(*:$mark)";
			$mark2replace{$mark} = $pattern;
			$mark++;
		}elsif( m"^\s*(as|with)\s+(\S.*)$" ){
			my $pattern = $2;
			eval { qr"$pattern"; };
			unless( $@ eq "" ){
				print STDERR "$conffile:$.: syntax error. \n";
				print STDERR "$conffile:$.: $@\n";
				next;
			}
			my $lastmark = $mark;
			$lastmark--;
			$mark2replace{$lastmark} = $pattern;
		}else{
			print STDERR "$conffile:$.: syntax error.\n";
			next;
		}
	}
	close $h;
	my $re = "(" . join("|", @res) . ")";

	eval { qr"$re"; };
	if( $@ ){
		print STDERR "$conffile:$.: $re\n";
		die "$conffile:$.: cannot compile, stopped";
		next;
	}
	return qr"$re", %mark2replace;
}

sub test_wellknown_regexp_conf ($) {
	my ($regexpfile) = @_;
        open my $h, '<', $regexpfile or die "$regexpfile: cannot open, stopped";
	my $pattern = join '', <$h>;
	close $h;
	chomp $pattern;
	return qr"^$pattern$";
}

sub test_traffic_conf ($) {
	my ($conffile) = @_;
	my @transaction_defs;
	my @traffic_defs;
	my %transaction2traffics;

	my $context;
	my $block;
	my $subblock;

	open my $h, '<', $conffile or die "$conffile: cannot open, stopped";
	while( <$h> ){
		chomp;
		s{^\s*}{}g;
		next if m{^($|#)};
		if    ( m"^\s*define_simple_transaction\s+(\w+)\s*$" ){
			$context = 'simple_transaction';
			$block = { type => 'simple', name => $1 };
			push @transaction_defs, $block;
			
		}elsif( m"^\s*define_multiline_transaction\s+(\w+)\s*$" ){
			$context = 'multiline_transaction';
			$block = { type => 'multiline', name => $1 };
			push @transaction_defs, $block;
			
		}elsif( m"^\s*captures_logs_tagged_as\s+(\S.*)$" ){
			push @{$$block{tag_regexps}}, qr"$1";

		}elsif( m"^\s*captures_logs_saying\s+(\S.*)$" ){
			push @{$$block{message_regexps}}, qr"$1";

		}elsif( m"^\s*begin_message\s+(\S.*)$" ){
			push @{$$block{begin_message_regexps}}, qr"$1";

		}elsif( m"^\s*end_message\s+(\S.*)$" ){
			push @{$$block{end_message_regexps}}, qr"$1";

		}elsif( m"^\s*identified_by\s+(\w+(,\w+)*)\s*$" ){
			$$block{identified_by} = [split m",", $1];

		}elsif( m"^\s*define_traffic\s+([/\w]+)\s*$" ){
			$context = 'traffic';
			$block = {
				name => $1,
				trigger_defs => [],
				treats       => [],
			};
			push @traffic_defs, $block;

		}elsif( m"^\s*treats\s+(\w+)\s*$" ){
			push @{$$block{treats}}, $1;
			push @{$transaction2traffics{$1}}, $block;

		}elsif( m"^\s*counted_by_each\s+(\w+(,\w+)*)\s*$" ){
			$$block{counted_by_each} = [split m",", $1];

		}elsif( m"^\s*during_last\s+(\d+)(m|h|d)?\s*$" ){
			my $during_last = $1 * 60;
			$during_last *= 60      if $2 eq 'h';
			$during_last *= 24 * 60 if $2 eq 'd';
			$$block{during_last} = $during_last;

		}elsif( m"^\s*define_trigger(\s+([\w]+))?\s*$" ){
			$context = 'trigger';
			$subblock = { name => $2 };
			push @{$$block{trigger_defs}}, $subblock;

		}elsif( m"^\s*causes\s+(\S.*)\s*$" ){
			$$subblock{causes} = $1;

		}elsif( m"^\s*pulled_if_total_exceeds\s+(\d+)\s*$" ){
			$$subblock{if_exceeds} = $1;

		}elsif( m"^\s*pulled_unless_total_exceeds\s+(\d+)\s*$" ){
			$$subblock{unless_exceeeds} = $1;

		}elsif( m"^\s*pulled_if_not_exists\s+(\S.*)$" ){
			$$subblock{if_not_exists} = $1;

		}elsif( m"^\s*targets\s+(\S.*)$" ){
			push @{$$subblock{rules}}, ['target', qr"$1"];

		}elsif( m"^\s*ignores\s+(\S.*)$" ){
			push @{$$subblock{rules}}, ['ignore', qr"$1"];

		}else{
			die "$conffile:$.: illegal format, stopped";
		}
	}
	close $h;

	return {
		transaction_defs => \@transaction_defs,
		traffic_defs     => \@traffic_defs,
		transaction2traffics => \%transaction2traffics,
	};
}

#### sub-commands

sub subcmd_test_confs () {
	my $monitor_conf = test_anomalymonitor_conf;
	my $concatfilter_conf  = test_concatfilter_conf;
	my $report_conf = test_report_conf;
	# TODO: tepmlates
	# TODO: regexps

	opendir my $h, $WELLKNOWNSDIR or do {
		die "$WELLKNOWNSDIR: illegal format, stopped";
	};
	while( my $e = readdir $h ){
		if( $e =~ m"^\w+\.rules$" ){
			my $rules_conf = test_wellknown_rules_conf "$WELLKNOWNSDIR/$e";
		}elsif( $e =~ m"^\w+\.regexp$" ){
			my $regexp_conf = test_wellknown_regexp_conf "$WELLKNOWNSDIR/$e";
		}
	}
	close $h;

	opendir my $h, $TRAFFICDIR or do {
		die "$TRAFFICDIR: illegal format, stopped";
	};
	while( my $e = readdir $h ){
		next unless $e =~ m"^\w+\.conf$";
		my $traffic_conf = test_traffic_conf "$TRAFFICDIR/$e";
	};
	close $h;
	exit 0;
}

sub subcmd_strip_wellknown_samples () {
	opendir my $d, $WELLKNOWNSDIR or do {
		die "$WELLKNOWNSDIR: cannot open. stopped";
	};
	my @samples;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		next unless -s "$WELLKNOWNSDIR/$e";
		next unless $e =~ m"^([-\w]+)(\+[-\w]+)?\.samples$";
		next unless -f "$WELLKNOWNSDIR/$1.rules";
		push @samples, {rules => $1, name => "$1$2"};
	}
	close $d;
	foreach my $sample ( sort @samples ){
		my $name = $sample->{name};
		my $rules = $sample->{rules};
		my $cmd;
		$cmd .= "$BINDIR/panopticfilter strip -r $WELLKNOWNSDIR/$rules.rules";
		$cmd .= " < $WELLKNOWNSDIR/$name.samples";
		$cmd .= " > $WELLKNOWNSDIR/$name.samples.new ; ";
		$cmd .= "mv $WELLKNOWNSDIR/$name.samples.new";
		$cmd .= " $WELLKNOWNSDIR/$name.samples";
		system $cmd;
	}
	exit 0;
}

####
sub get_mtime ($) {
	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
	    $atime,$mtime,$ctime,$blksize,$blocks) = stat $_[0];
	return $mtime;
}

sub subcmd_build_patterns () {
	opendir my $d, $WELLKNOWNSDIR or do {
		die "$WELLKNOWNSDIR: cannot open, stopped";
	};
	my %mtime;
	my %option;
	while( my $e = readdir $d ){
		next if $e =~ m"^\.";
		if    ( $e =~ m"^([-\w]+)\.regexp$" ){
			my $mtime = get_mtime "$WELLKNOWNSDIR/$e";
			next unless $mtime > 0;
			$mtime{$1}->{pattern} = $mtime;
		}elsif( $e =~ m"^([-\w]+)\.rules$" ){
			my $mtime = get_mtime "$WELLKNOWNSDIR/$e";
			next unless $mtime > 0;
			$mtime{$1}->{src} = $mtime if
				not defined($mtime{$1}->{src}) or
				$mtime > $mtime{$1}->{src};
		}elsif( $e =~ m"^([-\w]+)(?:\+([-\w]+))?\.samples$" ){
			my $mtime = get_mtime "$WELLKNOWNSDIR/$e";
			next unless $mtime > 0;
			$mtime{$1}->{src} = $mtime if
				not defined($mtime{$1}->{src}) or
				$mtime > $mtime{$1}->{src};
			push @{ $option{$1} }, $2 if $2;
		}
	}
	close $d;

	while( my ($k, $v) = each %mtime ){
		my $samplefile	  = "$WELLKNOWNSDIR/$k.samples";
		my $rulefile	  = "$WELLKNOWNSDIR/$k.rules";
		my $regexpfile	  = "$WELLKNOWNSDIR/$k.regexp";
		my $diagnosisfile = "$WELLKNOWNSDIR/$k.diagnosis";
		
		my $cmd;
		unless( -f $samplefile ){
                        $cmd .= "cp /dev/null $samplefile ;";
                        print "$samplefile: created.\n";
                }
		unless( -f $rulefile ){
                        $cmd .= "cp $CONFDIR/rules.template $rulefile ;";
                        print "$rulefile: created.\n";
                }
		next if -f $regexpfile and $$v{src} < $$v{pattern};
		$cmd .= "$BINDIR/panopticfilter build";
		$cmd .= " -r $rulefile -d $diagnosisfile";
		$cmd .= " -o $regexpfile -f $samplefile";
		foreach my $i ( @{$option{$k} // []} ){
			$cmd .= " -e $i -f $WELLKNOWNSDIR/$k+$i.samples";
		}
		system "$cmd\n";
	}

	exit 0;
}


####
my $cmd = shift @ARGV;
if    ($cmd eq 'test_confs'){
	subcmd_test_confs;

}elsif($cmd eq 'build_patterns'){
	subcmd_build_patterns;

}elsif($cmd eq 'strip_wellknown_samples'){
	subcmd_strip_wellknown_samples;

}else{
	print	"usage: % $0 <SUBCOMMAND>\n",
		"\n",
		"    SUBCOMMAND\n",
		"         test_confs\n",
		"         build_patterns\n",
		"         strip_wellknown_sample\n",
		"\n";
	exit 1;
}


####

exit 0;

 

