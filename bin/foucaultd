#!/usr/bin/perl

our ($TOOLHOME, $PLUGINSDIR, $CONFDIR, $LOGDIR, $RUNDIR);
BEGIN {
	$0 =~ m"^(.*)/";
	$TOOLHOME = "$1/..";
	while( $TOOLHOME =~ s{(^|/)[^\.][^/]*/\.\.(/|$)}{$1} ){}
	$TOOLHOME =~ s{/$}{};
	$PLUGINSDIR = "$TOOLHOME/plugins";
	$CONFDIR = "$TOOLHOME/conf";
	$LOGDIR = "$TOOLHOME/log";
	$RUNDIR = "$TOOLHOME/run";
}
use lib "$TOOLHOME/lib/perl5";

use English;
use Socket;
use IO::Handle;
use URI::Escape;
use HTTP::Daemon;
use HTTP::Status;
use LWP::UserAgent;
use IPC::Open2;
use Template;
use JSON::XS;
use Data::Dumper;
use Time::Local 'timelocal';
use POSIX setsid;
use strict;

use Foucault::Runtime;

our $NAME = 'foucaultd_new';

our $RUNTIME  = Foucault::Runtime->new( $TOOLHOME );
our $TOTALLOG = 0;
our $PING_RENEWAL_SEC = 3600;
our $PONG_EXPIRATION_SEC = 300;

#### child daemon functions

## asynchronus signal functions

sub process_periodic_as_child () {
	$RUNTIME->refresh_loggers;
	$RUNTIME->keep_filter;
	monitor_content( "" );

	my $timespan2added = {};
	my $timespan2removed = {};
	my $events = [];
	my $changes = [];
	$RUNTIME->keep_traffics   ($timespan2added, $timespan2removed);
	$RUNTIME->monitor_traffics($timespan2added, $timespan2removed, $events);
	$RUNTIME->update_trafficstatus( $events, $changes );
	$RUNTIME->write_traffic_changes( $changes );
	$RUNTIME->save_status;
}

sub unset_child_child_handler () {
	$SIG{'CHLD'} = 'IGNORE';
}

sub set_child_term_handler ($) {
	my ($server_socket) = @_;
	$SIG{'TERM'} = sub {
		#$d->shutdown;
		$RUNTIME->tracelog("[STEP] child daemon recieved SIGTERM");
		$server_socket->close;
	};
}

sub set_child_ping_handler ($) {
	my ($last_ping_time) = @_;
	$SIG{'USR1'} = sub {
		$RUNTIME->tracelog("[STEP] recieved ping.");
		$$last_ping_time = time;
	};
}

sub set_child_reload_handler () {
	$SIG{'HUP'} = sub {
		die "child daemon cannot accept HUP signal, stopped";
	};
}

sub set_child_periodic_handler ($$) {
	my ($last_ping_time, $last_pong_time) = @_;
	my $now = time;
	my $next_period = 60 - ( ($now-3) % 60 );
	$next_period += 60 if $next_period < 10;
	$SIG{ALRM} = sub {
		$RUNTIME->infolog("process_periodic_as_child: now=$now, next=$next_period");
		eval {
			process_periodic_as_child;
			set_child_periodic_handler( $last_ping_time, $last_pong_time );

			if( $$last_ping_time > $$last_pong_time ){
				kill 'USR1', getppid;
				$$last_pong_time = time;
				$RUNTIME->tracelog("[STEP] sent pong.");
			}
		};
		if( $@ ne '' ){
			$RUNTIME->infolog("process_periodic_as_child: error: $@");
		}
        };
        alarm $next_period;
}

## Web API action functions

sub add_events_to_transactions ($$$) {
	my ($trxid2times, $events, $unmonitored) = @_;
	foreach my $i ( @$events ){
		#my $tag     = $$i{tag};
		my $pattern = $$i{pattern};
		my $event   = $$i{event};
		$$trxid2times{"anomaly.all"}++;
		#$$trxid2times{"anomaly.by_tag.$tag"}++;
		$$trxid2times{"anomaly.by_pattern.$pattern"}++;
		$$trxid2times{"anomaly.by_event.$event"}++;
	}
	foreach my $i ( @$unmonitored ){
		#my $tag     = $$i{tag};
		$$trxid2times{"unmonitored.all"}++;
		#$$trxid2times{"unmonitored.by_tag.$tag"}++;
	}
}

sub monitor_content ($) {
	my ($content) = @_;

	$RUNTIME->tracelog("[STEP] processing messages...");
	my $tag2messages  = $RUNTIME->content2tag2messages( $content );

	$RUNTIME->tracelog("[STEP] processing concatination filters...");
	my $tag2cmessages = {};
	my $rmessages     = {};
	my $events        = [];
	my $unmonitored   = [];
	my $trxid2times   = {};
	$RUNTIME->passthrough_all_concatfilters( $tag2messages,  $tag2cmessages );
	return unless %$tag2cmessages;

	$RUNTIME->tracelog("[STEP] monitoring anomaly messages...");
	$RUNTIME->monitor_anomalies_repeatedly ( $tag2cmessages, $rmessages, $events, $unmonitored );

	$RUNTIME->tracelog("[STEP] writing anomaly events...");
	$RUNTIME->write_anomaly_events         ( $events );
	$RUNTIME->write_unmonitored_messages   ( $unmonitored );

	$RUNTIME->tracelog("[STEP] processing transaction filters...");
	$RUNTIME->passthrough_all_transactionfilters( $rmessages, $trxid2times );
	add_events_to_transactions $trxid2times, $events, $unmonitored;

	$RUNTIME->tracelog("[STEP] counting transactions...");
	$RUNTIME->add_transactions( $trxid2times );
}

sub action_monitor ($$) {
	my ($conn, $content) = @_;

	$TOTALLOG += length $content;

	monitor_content $content;

	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/plain');
	$res->content('');
	$conn->send_response($res);

	$RUNTIME->tracelog("[STEP] action \"monitor\" is complete.");
}

sub action_debug ($$) {
	my ($conn, $content) = @_;

	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/plain');
	$res->content( Dumper({
		'LATEST_TRAFFIC_SLICE' => $$RUNTIME{VOLATILE}->{LATEST_TRAFFIC_SLICE},
		'TRAFFIC_TIMELINE'     => $$RUNTIME{VOLATILE}->{TRAFFIC_TIMELINE},
		'TRAFFIC_SUBTIMESPANS' => $$RUNTIME{VOLATILE}->{RECENT_TRAFFIC_SUBTIMESPANS},
		'TRAFFIC_SUBTOTAL'     => $$RUNTIME{VOLATILE}->{RECENT_TRAFFIC_SUBTOTAL},
		'TRAFFIC_SUBTIMELINE'  => $$RUNTIME{VOLATILE}->{RECENT_TRAFFIC_SUBTIMELINE},
	}) );
	$conn->send_response($res);
}

sub action_alive ($) {
	my ($conn) = @_;
	my $encoder = JSON::XS->new->pretty(1)->indent(4)->space_after(1);
	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/plain');
	$res->content( $encoder->encode( {
		'TOTALLOG' => $TOTALLOG,
	} ) );
	$conn->send_response($res);
}

sub action_status_traffic_volume ($) {
	my ($conn) = @_;
	my $traffic_volume = $$RUNTIME{traffic_volume};
	my $encoder = JSON::XS->new->pretty(1)->indent(4)->space_after(1);
	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/plain');
	$res->content( $encoder->encode($$traffic_volume{TIMESPAN2VOLUME}) );
	$conn->send_response($res);
}

sub action_status_traffic_status ($) {
	my ($conn) = @_;
	my $volatile = $$RUNTIME{volatile};
	my $encoder = JSON::XS->new->pretty(1)->indent(4)->space_after(1);
	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/plain');
	$res->content( $encoder->encode($$volatile{trafficstatus}) );
	$conn->send_response($res);
}

sub action_status_timeline ($) {
	my ($conn) = @_;
	my $encoder = JSON::XS->new->pretty(1)->indent(4)->space_after(1);
	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/plain');
	$res->content( $encoder->encode($$RUNTIME{traffic_volume}->{TIMESPAN2TIMELINE}) );
	$conn->send_response($res);
}

sub Regexp::FREEZE {
	my ($self, $serialiser) = @_;
	return sprintf("%1.80s",$self);
}

sub action_status_rulecaches ($) {
	my ($conn) = @_;
	my $encoder = JSON::XS->new->pretty(1)->indent(4)->space_after(1)
		->allow_tags(1)->allow_blessed(1);
	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/plain');
	$res->content( $encoder->encode({
		'CONCATFILTER'		=> $$RUNTIME{CONF}->{CONCATFILTER_RULECACHE},
		'ANOMALYMONITOR'	=> $$RUNTIME{CONF}->{ANOMALYMONITOR_RULECACHE},
		'TRANSACTIONTFILTER'	=> $$RUNTIME{CONF}->{TRANSACTIONFILTER_RULECACHE},
		'TRAFFICMONITOR'	=> $$RUNTIME{CONF}->{TRAFFICMONITOR_RULECACHE},
	}) );
	$conn->send_response($res);
}

##

sub keep_child_daemon ($) {
	my ($server_socket) = @_;

	# the daemon process rename itself.
	$0 = "$NAME [child]";

	$RUNTIME->tracelog("[STEP] load traffic timelines...");
	$RUNTIME->load_status;

	my $last_ping_time;
	my $last_pong_time;

	unset_child_child_handler;
	set_child_term_handler $server_socket;
	set_child_ping_handler \$last_ping_time;
	set_child_reload_handler;
	set_child_periodic_handler \$last_ping_time, \$last_pong_time;

	$RUNTIME->tracelog("[STEP] starting daemon...");
	eval { while(1) {
		my ($conn, $peer_addr) = $server_socket->accept;
		unless( $conn ){
			last unless defined fileno $server_socket;
			next;
		}

		my $req = $conn->get_request;
		next unless $req;
		my $method = $req->method;
		my $path = uri_unescape $req->uri->path;
		my ($port, $bin_addr) = unpack_sockaddr_in $peer_addr;
		my $addr = inet_ntoa $bin_addr;
		$RUNTIME->accesslog('req: client=%s:%d method=%s path=%s',
			$addr, $port, $method, $path);

		unless( $RUNTIME->is_allowing_client_ipaddr($bin_addr) ){
			$RUNTIME->accesslog('error: denied.');
			$conn->send_error(RC_FORBIDDEN);
			$conn->close;
			undef $conn;
			next;
		}

		my $content = $req->content;
		if    ( $path =~ m"^/monitor/" ){
			action_monitor $conn, $content;
		}elsif( $path =~ m"^/debug/" ){
			action_debug   $conn, $content;
		}elsif( $path =~ m"^/status/(alive|timeline|traffic_volume|traffic_status|rulecaches)(/.*)$" ){
			if    ( $1 eq 'alive' ){
				action_alive              $conn;
			}elsif( $1 eq 'timeline' ){
				action_status_timeline    $conn;
			}elsif( $1 eq 'traffic_volume' ){
				action_status_traffic_volume $conn;
			}elsif( $1 eq 'traffic_status' ){
				action_status_traffic_status $conn;
			}elsif( $1 eq 'rulecaches' ){
				action_status_rulecaches  $conn;
			}
		}else{
			$conn->send_error(RC_FORBIDDEN);
		}
		$conn->close;
	} };

	if( $@ ne '' ){
		$RUNTIME->infolog("cmd_daemon: error: $@");
	}

	$RUNTIME->tracelog("[STEP] save status...");
	$RUNTIME->finalize;

	$RUNTIME->tracelog("[STEP] shutdown child daemon.");

	exit 0;
}


#### parent daemon functions

sub set_parent_child_handler ($$) {
	my ($child_pid, $child_exitstatus) = @_;

	$SIG{'CHLD'} = sub {
		$$child_exitstatus = waitpid $$child_pid, 0;
		$$child_pid = undef;
	};
}

sub unset_parent_child_handler () {
	$SIG{'CHLD'} = 'IGNORE';
}

sub set_parent_term_handler ($) {
	my ($server_socket) = @_;
	$SIG{'TERM'} = sub {
		$RUNTIME->infolog_as_parent("DEBUG: parent daemon recieved SIGTERM");
		$server_socket->close;
	};
}

sub set_parent_pong_handler ($) {
	my ($last_pong_time) = @_;
	$SIG{'USR1'} = sub {
		$RUNTIME->infolog_as_parent("recieved pong.");
		$$last_pong_time = time;
	};
}

sub set_parent_reload_handler ($$) {
	my ($child_must_restart_ref, $parent_must_reload_ref) = @_;

	$SIG{'HUP'} = sub {
		$$child_must_restart_ref = 1;
		$$parent_must_reload_ref = 1;
		$RUNTIME->infolog_as_parent("reloading...");
	};
}

##

sub generate_child_daemon ($) {
	my ($server_socket) = @_;
	my $child_pid;
	unless( $child_pid = fork ){
		keep_child_daemon $server_socket;
		exit 127;
	}
	return $child_pid;
}

sub stop_child_from_parent ($) {
	my ($child_pid) = @_;
	return 1 unless defined $child_pid;
	return 1 unless kill 0, $child_pid;

	kill 'TERM', $child_pid;
	for( my $i = 0; $i < 10; $i++ ){
		sleep 1;
		unless( kill 0, $child_pid ){
			return 1;
		}
	}
	kill 'KILL', $child_pid;
	for( my $i = 0; $i < 10; $i++ ){
		sleep 1;
		unless( kill 0, $child_pid ){
			return 1;
		}
	}
	return 0;
}

sub keep_parent_daemon () {
	# the daemon process rename itself.
	$0 = "$NAME";

	$RUNTIME->infolog_as_parent("starting daemon...");
	my ($addr, $port) = $RUNTIME->get_daemon_listen_addrport;

	my $server_socket = HTTP::Daemon->new(
		'Listen'    => 64,
		'ReuseAddr' => 1,
		'LocalAddr' => $addr,
		'LocalPort' => $port,
	) or do {
		die sprintf 'cannot listen %s:%d: %s, stopped', $addr, $port, $OS_ERROR;
	};

	my $child_pid;
	my $child_exitstatus;

	my $child_is_running = 1;
	my $child_must_restart = undef;
	my $parent_must_reload = undef;

	my $last_ping_time;
	my $last_pong_time;

	unset_parent_child_handler;
	set_parent_term_handler   $server_socket;
	set_parent_pong_handler   \$last_pong_time;
	set_parent_reload_handler \$child_must_restart, \$parent_must_reload;

	while (1) {
		last unless defined fileno $server_socket;

		unless( $child_is_running ){
			my $exited_pid = waitpid $child_pid, 0;
			$child_pid = undef;
			$RUNTIME->infolog_as_parent("child daemon was stopped.");
		}

		if( $parent_must_reload ){
			$RUNTIME->reload_as_parent;
			$RUNTIME->infolog_as_parent("reloading is complete.");
		}

		if( $child_must_restart ){
			$RUNTIME->infolog_as_parent("stopping child daemon...");
			stop_child_from_parent $child_pid;
			$child_pid = undef;
		}

		unless( defined $child_pid ){
			$RUNTIME->infolog_as_parent("stating child daemon...");
			$child_pid = generate_child_daemon $server_socket;
			$child_is_running = 1;
			$child_must_restart = undef;
			$last_ping_time = $last_pong_time = time;
			set_parent_child_handler  \$child_pid, \$child_exitstatus;
		}

		my $now = time;
		if( $last_ping_time > $last_pong_time ){
			if( $now < $last_ping_time + $PONG_EXPIRATION_SEC ){
				$child_must_restart = 1;
				next;
			}
		}else{
			if( $now > $last_ping_time + $PING_RENEWAL_SEC ){
				kill 'USR1', $child_pid;
				$last_ping_time = $now;
				$RUNTIME->infolog("sent ping.");
			}
		}

		sleep 1;
		select undef, undef, undef, 300;
	}

	$RUNTIME->infolog_as_parent("shutting down parent daemon...");
	if( $child_pid ){
		$RUNTIME->infolog_as_parent("stopping child daemon...");
		stop_child_from_parent $child_pid;
		my $exited_pid = waitpid $child_pid, 0;
		$RUNTIME->infolog_as_parent("child daemon was stopped.");
	}
}

sub generate_parent_daemon () {
	my $parent_pid;
	unless( $parent_pid = fork ){
		$RUNTIME->write_pidfile;

		my $daemon_user = $RUNTIME->get_daemon_user;
		if( $daemon_user ne '-' ){
			my ($name, $pw, $uid, $gid, $quota, $comment, $gcos,
			    $home, $shell) = getpwnam $daemon_user;
			unless( defined $uid and defined $gid ){
				die "setuid: $daemon_user: not found, stopped";
			}
		
			$( = $gid unless $( == $gid;
			$) = $gid unless $) == $gid;
			$< = $uid unless $< == $uid;
			$> = $uid unless $> == $uid;
			$ENV{HOME} = $home;
		}

		setsid;

		open STDIN,  "<", "/dev/null" or die;
		open STDOUT, ">", "/dev/null" or die;
		open STDERR, ">", "/dev/null" or die;

		eval {
			keep_parent_daemon;
		};
		if( $@ ){
			$RUNTIME->errorlog_as_parent("error occured: %s", $@);
		}
		exit 127;
	}
}

#### sub commands

sub cmd_daemon () {
	if( $RUNTIME->read_pidfile ){
		print STDERR "pid found.\n";
		exit 2;
	}

	$RUNTIME->setup_as_daemon;
	generate_parent_daemon;
}

sub cmd_kill () {
	my $pid = $RUNTIME->read_pidfile;
	unless( defined $pid ){
		print STDERR "no pidfile found.\n";
		exit 1;
	}
	unless( kill 0, $pid ){
		print STDERR "no pid found.\n";
		exit 2;
	}
	kill 'TERM', $pid;
}

sub cmd_reload () {
	my $pid = $RUNTIME->read_pidfile;
	unless( defined $pid ){
		print STDERR "no pidfile found.\n";
		exit 1;
	}
	unless( kill 0, $pid ){
		print STDERR "no pid found.\n";
		exit 2;
	}
	kill 'HUP', $pid;
}

##

if    ( $ARGV[0] eq "daemon" ){
	$RUNTIME->setup_as_tool;

	cmd_daemon;
	exit 0;

}elsif( $ARGV[0] eq "kill" ){
	$RUNTIME->setup_as_tool;

	cmd_kill;
	exit 0;

}elsif( $ARGV[0] eq "reload" ){
	$RUNTIME->setup_as_tool;

	cmd_reload;
	exit 0;

}else{
	print "usage: % $0 {daemon|kill|reload}\n";
	exit 0;
}



